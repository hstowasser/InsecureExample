#!/usr/bin/env python3
"""
Description: Generates system wide secrets containing all potential regions
Use: Once per ecosystem of devices
"""
import json
from argparse import ArgumentParser
from Crypto.PublicKey import RSA
from Crypto import Random
import os
from global_constants import *


def main(region_dict, file_name):
    try:
        secrets = open(file_name, "w")
    except Exception as e:
        print("Unable to open secrets file: %s" % (e,))
        return 0

    json.dump(region_dict, secrets)
    secrets.close()


def get_args():
    """gets arguments from command line"""
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--region-list', help='list of regions for provisioning purposes',
                        required=True, nargs='+')
    parser.add_argument('--outfile', help='file to save region secrets to', required=True)
    args = parser.parse_args()
    return args.region_list, args.outfile


if __name__ == '__main__':
    region_list, outfile = get_args()
    print("generating system specific secrets")
    global_key = RSA.generate(RSA_KEY_SZ_BITS, os.urandom)
    n_bytes = global_key.n.to_bytes(RSA_KEY_SZ, 'big')
    e_bytes = global_key.e.to_bytes(RSA_KEY_SZ, 'big')
    d_bytes = global_key.d.to_bytes(RSA_KEY_SZ, 'big')
    #public_key = global_key.publickey().exportKey("DER") 
    #private_key = global_key.exportKey("DER") 
    #user_dict = {user.split(":")[0]: {"pin": user.split(":")[1], "pin_hash": hex(hashlib.sha256(user.split(":")[1].encode()).digest()), "id": num} for num, user in enumerate(user_list)}
    regionsy = {region: { 'region':num, 'region_key': os.urandom(HASH_SZ).hex()} for num, region in enumerate(region_list)}  # Create region IDs based on increasing integers
    regions = { "global" : { "global_key_n" : n_bytes.hex(), "global_key_e" : e_bytes.hex(),"global_key_d" : d_bytes.hex(), 'regions' :  regionsy}}
    main(regions, outfile)
