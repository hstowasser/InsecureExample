#!/usr/bin/env python3
"""
Description: Creates user specific secrets
Use: Once per user
"""

import json
from argparse import ArgumentParser
import hashlib
import os
from Crypto.PublicKey import RSA
from global_constants import *



def main(user_list, outfile):
    """writes user secrets to json file
    args:
        users_ (string): string of users and pins seperated by colons e.g. user1:123456789
        outfile (string): name of file to write user_secrets to """
    try:
        secrets = open(outfile, "w")
    except Exception as e:
        print("Unable to open secrets file: %s" % (e,))
        return 0

    try:
        first = True
        for num, user in enumerate(user_list):
            # Generate RSA Keys
            user_key = RSA.generate(RSA_KEY_SZ_BITS, os.urandom)
            n_bytes = user_key.n.to_bytes(RSA_KEY_SZ, 'big')
            e_bytes = user_key.e.to_bytes(RSA_KEY_SZ, 'big')
            d_bytes = user_key.d.to_bytes(RSA_KEY_SZ, 'big')
            #public_key = user_key.publickey().exportKey("DER") 
            #private_key = user_key.exportKey("DER")
            user_d = {user.split(":")[0]: {"pin": user.split(":")[1], 
                "pin_hash": hashlib.sha256(user.split(":")[1].encode()).digest().hex(), 
                "rsa_key_n": n_bytes.hex(),
                "rsa_key_e": e_bytes.hex(),
                "rsa_key_d": d_bytes.hex(),
                "id": num} }
            if first:
                user_dict = user_d
                first = False
            else:
                user_dict.update(user_d)
        #user_dict = {user.split(":")[0]: {"pin": user.split(":")[1], "pin_hash": hex(hashlib.sha256(user.split(":")[1].encode()).digest()), "id": num} for num, user in enumerate(user_list)}
    except IndexError:
        raise Exception(
            "Unable to parse user name and pin. Please make sure you entered the user-list as "
            "space seperated pairs of usernames and pins. Example: --user-list user1:12345678 user2:12345689")
    info = json.dumps(user_dict)
    secrets.write(info)
    secrets.close()


def get_args():
    """gets arguments from command line"""
    parser = ArgumentParser(description='main interface to provision system')
    parser.add_argument('--user-list', nargs='+',
                        help='list of users and pins seperated by a colon: "user1:12345678 user2:12345679" ',
                        required=True)
    parser.add_argument('--outfile', help='location to save user secrets file', required=True)
    args = parser.parse_args()
    return args.user_list, args.outfile


if __name__ == '__main__':
    users, loc = get_args()
    print("generating user specific secrets")
    main(users, loc)
